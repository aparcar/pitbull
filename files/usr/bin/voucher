#!/usr/bin/lua

local config = require('voucher.config')
local dba = require('voucher.db')
local logic = require('voucher.logic')
local ft = require('voucher.functools')

local arguments
local action
local context

captive_portal = {}

captive_portal.auth_voucher = function(context)
    local mac = context[1]
    local voucher = context[2]

    local db = dba.load(config.db)
    local retval = { logic.auth_voucher(db, mac, voucher)}

    dba.save(config.db, db)
    print ( unpack(retval) )
end

captive_portal.status = function(context)
    local mac = context[1]

    local db = dba.load(config.db)
    print ( logic.status(db, mac) )
end

captive_portal.add_voucher = function(context)
    local key = context[1]
    local voucher = context[2]
    local epoc = context[3]
    local upload = context[4] and context[4] or '0'
    local download = context[5] and context[5] or '0'
    local amountofmacsallowed = context[6] and context[6] or '0'

    local db = dba.load(config.db)
    local retval = { logic.add_voucher(db, key, voucher, epoc, upload, download, amountofmacsallowed)}
    dba.save(config.db, db)
    print ( unpack(retval) )
end

captive_portal.print_valid_macs = function(context)
    local db = dba.load(config.db)
    local macs = logic.valid_macs(db)
    for _, mac in ipairs(macs) do
        print ( mac )
    end
end

captive_portal.get_mac_from_ip = function(context)
    local ip = context[1]
    local command = 'ping -i 0.2 -w 0.2 -c 1 '..ip..' >/dev/null; cat /proc/net/arp | grep '..ip..' | grep br-lan | awk \'{print $4}\''
    fd = io.popen(command, 'r')
    local output = fd:read('*all')
    fd:close()
    print (output)
end

-- if is main
if debug.getinfo(2).name == nil then
    arguments = { ... }
    action = arguments[1]
    context = ft.filter(function(row, index) return index > 1 end, arguments)

    captive_portal[action](context)
end

return captive_portal
